# Configuração da URL de conexão com o banco de dados MySQL
spring.datasource.url = jdbc:mysql://localhost:3306/test?allowPublicKeyRetrieval=true&useSSL=false
# - spring.datasource.url: Define a URL de conexão com o banco de dados.
# - jdbc:mysql://localhost:3306/test: O banco de dados está rodando localmente na porta 3306 e o nome do banco de dados é "test".
# - allowPublicKeyRetrieval=true: Permite que a chave pública do servidor seja recuperada, útil em criptografia SSL.
# - useSSL=false: Desativa o uso de SSL para a conexão. Esta configuração é adequada para ambientes de desenvolvimento.

# Nome de usuário e senha para acessar o banco de dados
spring.datasource.username = root
# - spring.datasource.username: Define o nome de usuário do banco de dados. Aqui o valor é "root", que é o padrão para MySQL.

spring.datasource.password = 1234
# - spring.datasource.password: Define a senha do banco de dados. Aqui também é "root", que é o padrão do MySQL.

# Configuração do JPA e Hibernate para gerenciar o banco de dados
spring.jpa.hibernate.ddl_auto=update
# - spring.jpa.hibernate.ddl_auto: Especifica a política de atualização do schema do banco de dados.
# - update: O Hibernate irá automaticamente atualizar o schema conforme as entidades da aplicação são modificadas (somente em desenvolvimento).

spring.jpa.show-sql=true
# - spring.jpa.show-sql: Habilita a exibição das queries SQL no console. Isso ajuda a visualizar as operações SQL executadas.

# Chave secreta usada para gerar e verificar tokens JWT (JSON Web Tokens)
jwt.secret=3f9e0d0c43e94f61a65c169e0fc7e074d0d7169b7c2a490db94e091d987dbf87
# - jwt.secret: Chave secreta usada para assinar tokens JWT. Essa chave deve ser segura, pois comprometer essa chave compromete a segurança dos tokens.

logging.level.org.springframework.security=DEBUG
